#ifndef __KEYBOARD_INPUT_H__
#define __KEYBOARD_INPUT_H__

#include <vector>
#include "SDL/SDL.h"

namespace FW {
  class KeyboardInput {
  public:
    // copying from SDL_ScanCode lookup table here:
    // https://wiki.libsdl.org/SDLScancodeLookup
    enum class Key {
      UNKNOWN = 0x000,
      A = 0x004,
      B = 0x005,
      C = 0x006,
      D = 0x007,
      E = 0x008,
      F = 0x009,
      G = 0x00A,
      H = 0x00B,
      I = 0x00C,
      J = 0x00D,
      K = 0x00E,
      L = 0x00F,
      M = 0x010,
      N = 0x011,
      O = 0x012,
      P = 0x013,
      Q = 0x014,
      R = 0x015,
      S = 0x016,
      T = 0x017,
      U = 0x018,
      V = 0x019,
      W = 0x01A,
      X = 0x01B,
      Y = 0x01C,
      Z = 0x01D,
      NUM_1 = 0x01E,
      NUM_2 = 0x01F,
      NUM_3 = 0x020,
      NUM_4 = 0x021,
      NUM_5 = 0x022,
      NUM_6 = 0x023,
      NUM_7 = 0x024,
      NUM_8 = 0x025,
      NUM_9 = 0x026,
      NUM_0 = 0x027,
      RETURN = 0x028,
      ESCAPE = 0x029,
      BACKSPACE = 0x02A,
      TAB = 0x02B,
      SPACE = 0x02C,
      MINUS = 0x02D,
      EQUALS = 0x02E,
      LEFTBRACKET = 0x02F,
      RIGHTBRACKET = 0x030,
      BACKSLASH = 0x031,
      NONUSHASH = 0x032,
      SEMICOLON = 0x033,
      APOSTROPHE = 0x034,
      GRAVE = 0x035,
      COMMA = 0x036,
      PERIOD = 0x037,
      SLASH = 0x038,
      CAPSLOCK = 0x039,
      F1 = 0x03A,
      F2 = 0x03B,
      F3 = 0x03C,
      F4 = 0x03D,
      F5 = 0x03E,
      F6 = 0x03F,
      F7 = 0x040,
      F8 = 0x041,
      F9 = 0x042,
      F10 = 0x043,
      F11 = 0x044,
      F12 = 0x045,
      PRINTSCREEN = 0x046,
      SCROLLLOCK = 0x047,
      PAUSE = 0x048,
      INSERT = 0x049,
      HOME = 0x04A,
      PAGEUP = 0x04B,
      DELETE = 0x04C,
      END = 0x04D,
      PAGEDOWN = 0x04E,
      RIGHT = 0x04F,
      LEFT = 0x050,
      DOWN = 0x051,
      UP = 0x052,
      NUMLOCKCLEAR = 0x053,
      KP_DIVIDE = 0x054,
      KP_MULTIPLY = 0x055,
      KP_MINUS = 0x056,
      KP_PLUS = 0x057,
      KP_ENTER = 0x058,
      KP_1 = 0x059,
      KP_2 = 0x05A,
      KP_3 = 0x05B,
      KP_4 = 0x05C,
      KP_5 = 0x05D,
      KP_6 = 0x05E,
      KP_7 = 0x05F,
      KP_8 = 0x060,
      KP_9 = 0x061,
      KP_0 = 0x062,
      KP_PERIOD = 0x063,
      NONUSBACKSLASH = 0x064,
      APPLICATION = 0x065,
      POWER = 0x066,
      KP_EQUALS = 0x067,
      F13 = 0x068,
      F14 = 0x069,
      F15 = 0x06A,
      F16 = 0x06B,
      F17 = 0x06C,
      F18 = 0x06D,
      F19 = 0x06E,
      F20 = 0x06F,
      F21 = 0x070,
      F22 = 0x071,
      F23 = 0x072,
      F24 = 0x073,
      EXECUTE = 0x074,
      HELP = 0x075,
      MENU = 0x076,
      SELECT = 0x077,
      STOP = 0x078,
      AGAIN = 0x079,
      UNDO = 0x07A,
      CUT = 0x07B,
      COPY = 0x07C,
      PASTE = 0x07D,
      FIND = 0x07E,
      MUTE = 0x07F,
      VOLUMEUP = 0x080,
      VOLUMEDOWN = 0x081,
      KP_COMMA = 0x085,
      KP_EQUALSAS400 = 0x086,
      INTERNATIONAL1 = 0x087,
      INTERNATIONAL2 = 0x088,
      INTERNATIONAL3 = 0x089,
      INTERNATIONAL4 = 0x08A,
      INTERNATIONAL5 = 0x08B,
      INTERNATIONAL6 = 0x08C,
      INTERNATIONAL7 = 0x08D,
      INTERNATIONAL8 = 0x08E,
      INTERNATIONAL9 = 0x08F,
      LANG1 = 0x090,
      LANG2 = 0x091,
      LANG3 = 0x092,
      LANG4 = 0x093,
      LANG5 = 0x094,
      LANG6 = 0x095,
      LANG7 = 0x096,
      LANG8 = 0x097,
      LANG9 = 0x098,
      ALTERASE = 0x099,
      SYSREQ = 0x09A,
      CANCEL = 0x09B,
      CLEAR = 0x09C,
      PRIOR = 0x09D,
      RETURN2 = 0x09E,
      SEPARATOR = 0x09F,
      OUT = 0x0A0,
      OPER = 0x0A1,
      CLEARAGAIN = 0x0A2,
      CRSEL = 0x0A3,
      EXSEL = 0x0A4,
      KP_00 = 0x0B0,
      KP_000 = 0x0B1,
      THOUSANDSSEPARATOR = 0x0B2,
      DECIMALSEPARATOR = 0x0B3,
      CURRENCYUNIT = 0x0B4,
      CURRENCYSUBUNIT = 0x0B5,
      KP_LEFTPAREN = 0x0B6,
      KP_RIGHTPAREN = 0x0B7,
      KP_LEFTBRACE = 0x0B8,
      KP_RIGHTBRACE = 0x0B9,
      KP_TAB = 0x0BA,
      KP_BACKSPACE = 0x0BB,
      KP_A = 0x0BC,
      KP_B = 0x0BD,
      KP_C = 0x0BE,
      KP_D = 0x0BF,
      KP_E = 0x0C0,
      KP_F = 0x0C1,
      KP_XOR = 0x0C2,
      KP_POWER = 0x0C3,
      KP_PERCENT = 0x0C4,
      KP_LESS = 0x0C5,
      KP_GREATER = 0x0C6,
      KP_AMPERSAND = 0x0C7,
      KP_DBLAMPERSAND = 0x0C8,
      KP_VERTICALBAR = 0x0C9,
      KP_DBLVERTICALBAR = 0x0CA,
      KP_COLON = 0x0CB,
      KP_HASH = 0x0CC,
      KP_SPACE = 0x0CD,
      KP_AT = 0x0CE,
      KP_EXCLAM = 0x0CF,
      KP_MEMSTORE = 0x0D0,
      KP_MEMRECALL = 0x0D1,
      KP_MEMCLEAR = 0x0D2,
      KP_MEMADD = 0x0D3,
      KP_MEMSUBTRACT = 0x0D4,
      KP_MEMMULTIPLY = 0x0D5,
      KP_MEMDIVIDE = 0x0D6,
      KP_PLUSMINUS = 0x0D7,
      KP_CLEAR = 0x0D8,
      KP_CLEARENTRY = 0x0D9,
      KP_BINARY = 0x0DA,
      KP_OCTAL = 0x0DB,
      KP_DECIMAL = 0x0DC,
      KP_HEXADECIMAL = 0x0DD,
      LCTRL = 0x0E0,
      LSHIFT = 0x0E1,
      LALT = 0x0E2,
      LGUI = 0x0E3,
      RCTRL = 0x0E4,
      RSHIFT = 0x0E5,
      RALT = 0x0E6,
      RGUI = 0x0E7,
      MODE = 0x101,
      AUDIONEXT = 0x102,
      AUDIOPREV = 0x103,
      AUDIOSTOP = 0x104,
      AUDIOPLAY = 0x105,
      AUDIOMUTE = 0x106,
      MEDIASELECT = 0x107,
      WWW = 0x108,
      MAIL = 0x109,
      CALCULATOR = 0x10A,
      COMPUTER = 0x10B,
      AC_SEARCH = 0x10C,
      AC_HOME = 0x10D,
      AC_BACK = 0x10E,
      AC_FORWARD = 0x10F,
      AC_STOP = 0x110,
      AC_REFRESH = 0x111,
      AC_BOOKMARKS = 0x112,
      BRIGHTNESSDOWN = 0x113,
      BRIGHTNESSUP = 0x114,
      DISPLAYSWITCH = 0x115,
      KBDILLUMTOGGLE = 0x116,
      KBDILLUMDOWN = 0x117,
      KBDILLUMUP = 0x118,
      EJECT = 0x119,
      SLEEP = 0x11A,
      APP1 = 0x11B,
      APP2 = 0x11C
    };

    KeyboardInput();
    KeyboardInput(const KeyboardInput&) =delete;
    KeyboardInput& operator=(const KeyboardInput&) =delete;
    ~KeyboardInput();

    void update();
    bool isPrevPressed(Key) const;
    bool isPressed(Key) const;
    bool isClicked(Key) const;
    bool isReleased(Key) const;

  private:
    static bool created;

    std::vector<Uint8> prevState;
    std::vector<Uint8> nextState;
  };
}

#endif
